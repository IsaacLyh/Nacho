package nachos.userprog;

import nachos.machine.*;
import nachos.threads.*;
import nachos.userprog.*;
import java.util.HashMap;  
import java.util.*;

/**
 * A kernel that can support multiple user processes.
 */
public class UserKernel extends ThreadedKernel {
	/**
	 * Allocate a new user kernel.
	 */
	public UserKernel() {
		super();
	}

	/**
	 * Initialize this kernel. Creates a synchronized console and sets the
	 * processor's exception handler.
	 */
	public void initialize(String[] args) {
		super.initialize(args);

		console = new SynchConsole(Machine.console());
		for(int i = 0; i < args.length;i++){
		    System.out.println(args[i]);
		}
		Machine.processor().setExceptionHandler(new Runnable() {
			public void run() {
				exceptionHandler();
			}
		});
		for(int i=0; i<Machine.processor().getNumPhysPages(); i++){
			pageTable.add(i);
		}
	}

	/**
	 * Test the console device.
	 */
	public void selfTest() {
		super.selfTest();

		System.out.println("Testing the console device. Typed characters");
		System.out.println("will be echoed until ')' is typed.");
		char input = '.';
		while(input != ')'){
			input = (char)console.readByte(true);
			System.out.println("Detected input : " + input);
		}
		//test for create UserProcess
		System.out.println("********Initializing UserProcess Test********");
		UserProcess subject = new UserProcess();
		int pid = getPid();
		System.out.println("Attampting to register UserProcess with pid "+pid);
		UserKernel.register(pid,subject);
		try{
			System.out.println("Successfully registered 1 UserProcess");
			System.out.println("Attampting to UserProcess retrival");
		}
		catch(Exception e){
			System.out.println(e.toString());
			return;
		}
		System.out.println("********Initializing********");
		UserProcess result2 = getProcess(pid);
		if(result2.equals(subject)){
			System.out.println("Successfully retrieved 1 UserProcess with pid " + pid);
			System.out.println("Attampting to unregister UserProcess with pid " + pid);
		}
		UserKernel.unregister(pid);
		System.out.println("********Veryfing********");
		UserProcess result3 = getProcess(pid);
		if(result3 == null){
			System.out.println("Successfully unregistered 1 UserProcess with pid " + pid);
		}
		System.out.println("Kernel self test completed");
		System.out.println("********Starting UserProcess Test********");
		UserProcess result4 = new UserProcess();
		//result4.handleSyscall(1,0,0,0,0);
		result4.handleSyscall(2,2,1,2,3);
		//System.out.println("hahah");
	}

	/**
	 * Returns the current process.
	 * 
	 * @return the current process, or <tt>null</tt> if no process is current.
	 */
	public static UserProcess currentProcess() {
		if (!(KThread.currentThread() instanceof UThread))
			return null;

		return ((UThread) KThread.currentThread()).process;
	}

	/**
	 * The exception handler. This handler is called by the processor whenever a
	 * user instruction causes a processor exception.
	 * 
	 * <p>
	 * When the exception handler is invoked, interrupts are enabled, and the
	 * processor's cause register contains an integer identifying the cause of
	 * the exception (see the <tt>exceptionZZZ</tt> constants in the
	 * <tt>Processor</tt> class). If the exception involves a bad virtual
	 * address (e.g. page fault, TLB miss, read-only, bus error, or address
	 * error), the processor's BadVAddr register identifies the virtual address
	 * that caused the exception.
	 */
	public void exceptionHandler() {
		Lib.assertTrue(KThread.currentThread() instanceof UThread);

		UserProcess process = ((UThread) KThread.currentThread()).process;
		int cause = Machine.processor().readRegister(Processor.regCause);
		process.handleException(cause);
	}

	/**
	 * Start running user programs, by creating a process and running a shell
	 * program in it. The name of the shell program it must run is returned by
	 * <tt>Machine.getShellProgramName()</tt>.
	 * 
	 * @see nachos.machine.Machine#getShellProgramName
	 */
	public void run() {
		super.run();

		UserProcess process = UserProcess.newUserProcess();

		String shellProgram = Machine.getShellProgramName();
		Lib.assertTrue(process.execute(shellProgram, new String[] {}));

		KThread.currentThread().finish();
	}

	/**
	 * Terminate this kernel. Never returns.
	 */
	public void terminate() {
		super.terminate();
	}

	/** Globally accessible reference to the synchronized console. */
	public static SynchConsole console;

	// dummy variables to make javac smarter
	private static Coff dummy1 = null;

	/* personal changes here. */
	private static LinkedList<Integer> pageTable = new LinkedList<Integer>();

	private static int nextPid = 0;
	private static HashMap<Integer, UserProcess> map = new HashMap<Integer, UserProcess>();

	public static int getPage(){
		int val;
		Machine.interrupt().disable();
		if( pageTable.isEmpty() ) val = -1;
		else val = pageTable.removeFirst();
		Machine.interrupt().enable();
		return val;
	}
	public static void addPage(int pageNum){
		Lib.assertTrue(pageNum >= 0 && pageNum < Machine.processor().getNumPhysPages());
		Machine.interrupt().disable();
		pageTable.add(pageNum);
		Machine.interrupt().enable();
	}
	//return pid for next process
	public static int getPid(){
		Machine.interrupt().disable();
		nextPid++;
		Machine.interrupt().enable();
		return nextPid;
	}
	//get process
	public static UserProcess getProcess(int pid){
		return map.get(pid);
	} 
	//register UserProcess:
	public static void register(int pid, UserProcess p){
		Machine.interrupt().disable();
		map.put(pid,p);
		Machine.interrupt().enable();
	}
	//remove process from map;
	public static void unregister(int pid){
		Machine.interrupt().disable();
		map.remove(pid);
		Machine.interrupt().enable();
	}




























}
